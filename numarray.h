#ifdef __cplusplus
#include "Arrays.hpp"
#include "IO.hpp"

extern "C" {
#endif


#ifdef __cplusplus
// C++ type definitions
typedef Vector<int>* nar_iv;
typedef Matrix<int>* nar_im;
typedef Vector<long>* nar_lv;
typedef Matrix<long>* nar_lm;
typedef Vector<float>* nar_sv;
typedef Matrix<float>* nar_sm;
typedef Vector<double>* nar_dv;
typedef Matrix<double>* nar_dm;
typedef Vector<std::complex<float>>* nar_cv;
typedef Matrix<std::complex<float>>* nar_cm;
typedef Vector<std::complex<double>>* nar_zv;
typedef Matrix<std::complex<double>>* nar_zm;
typedef Vector<char>* nar_xv;
typedef Matrix<char>* nar_xm;
typedef Vector<void*>* nar_pv;
typedef Matrix<void*>* nar_pm;
#else
// C type definitions
typedef void* nar_iv;
typedef void* nar_im;
typedef void* nar_lv;
typedef void* nar_lm;
typedef void* nar_sv;
typedef void* nar_sm;
typedef void* nar_dv;
typedef void* nar_dm;
typedef void* nar_cv;
typedef void* nar_cm;
typedef void* nar_zv;
typedef void* nar_zm;
typedef void* nar_xv;
typedef void* nar_xm;
typedef void* nar_pv;
typedef void* nar_pm;
#endif

enum nar_order {
    nar_row_major = 0,
    nar_col_major = 1,
    nar_unknown = 2
};

/* Insert prototypes here */
/* This file was automatically generated.  Do not edit! */
#undef INTERFACE
void nar_string_free(char *s);
int nar_pm_write_binary(nar_pm v,const char *filename);
nar_pm nar_pm_read_binary(const char *filename,int row_major,int *err);
int nar_pv_write_binary(nar_pv v,const char *filename);
nar_pv nar_pv_read_binary(const char *filename,int *err);
int nar_pm_write(nar_pm v,const char *filename,const char *sep);
nar_pm nar_pm_read(const char *filename,int row_major,int *err);
int nar_pv_write(nar_pv v,const char *filename,const char *sep);
nar_pv nar_pv_read(const char *filename,int *err);
int nar_pm_set_safe(nar_pm mat,int i,int j,void *x);
int nar_pm_get_safe(void **x,nar_pm mat,int i,int j);
int nar_pv_set_safe(nar_pv v,int i,void *x);
int nar_pv_get_safe(void **x,nar_pv v,int i);
void nar_pm_set(nar_pm mat,int i,int j,void *x);
void *nar_pm_get(nar_pm mat,int i,int j);
void nar_pv_set(nar_pv v,int i,void *x);
void *nar_pv_get(nar_pv v,int i);
char *nar_pv_display_string(nar_pv v);
char *nar_pm_display_string(nar_pm mat);
int nar_pm_assign(nar_pm mat1,nar_pm mat2);
int nar_pm_eq(nar_pm mat1,nar_pm mat2);
int nar_pm_get_cols(nar_pm mat);
int nar_pm_get_rows(nar_pm mat);
int nar_pm_get_ld(nar_pm mat);
void **nar_pm_pointer(nar_pm mat);
int nar_pm_subarray_safe(nar_pm *x,nar_pm mat,int start_row,int start_col,int end_row,int end_col);
int nar_pm_col_safe(nar_pv *x,nar_pm mat,int j);
int nar_pm_row_safe(nar_pv *x,nar_pm mat,int i);
nar_pm nar_pm_subarray(nar_pm mat,int start_row,int start_col,int end_row,int end_col);
nar_pv nar_pm_col(nar_pm mat,int j);
nar_pv nar_pm_row(nar_pm mat,int i);
enum nar_order nar_pm_order(nar_pm mat);
int nar_pm_valid(nar_pm mat,int i,int j);
nar_pm nar_pm_copy(nar_pm mat);
void nar_pm_free(nar_pm mat);
nar_pm nar_pm_alloc(int rows,int cols,int row_major);
int nar_pv_assign(nar_pv v1,nar_pv v2);
int nar_pv_eq(nar_pv v1,nar_pv v2);
int nar_pv_n(nar_pv v);
int nar_pv_inc(nar_pv v);
void **nar_pv_pointer(nar_pv v);
int nar_pv_slice_safe(nar_pv *out,nar_pv v,int start,int end);
nar_pv nar_pv_slice(nar_pv v,int start,int end);
int nar_pv_valid(nar_pv v,int i);
nar_pv nar_pv_copy(nar_pv v);
void nar_pv_free(nar_pv v);
nar_pv nar_pv_alloc(int n);
int nar_xm_write_binary(nar_xm v,const char *filename);
nar_xm nar_xm_read_binary(const char *filename,int row_major,int *err);
int nar_xv_write_binary(nar_xv v,const char *filename);
nar_xv nar_xv_read_binary(const char *filename,int *err);
int nar_xm_write(nar_xm v,const char *filename,const char *sep);
nar_xm nar_xm_read(const char *filename,int row_major,int *err);
int nar_xv_write(nar_xv v,const char *filename,const char *sep);
nar_xv nar_xv_read(const char *filename,int *err);
int nar_xm_set_safe(nar_xm mat,int i,int j,char x);
int nar_xm_get_safe(char *x,nar_xm mat,int i,int j);
int nar_xv_set_safe(nar_xv v,int i,char x);
int nar_xv_get_safe(char *x,nar_xv v,int i);
void nar_xm_set(nar_xm mat,int i,int j,char x);
char nar_xm_get(nar_xm mat,int i,int j);
void nar_xv_set(nar_xv v,int i,char x);
char nar_xv_get(nar_xv v,int i);
char *nar_xv_display_string(nar_xv v);
char *nar_xm_display_string(nar_xm mat);
int nar_xm_assign(nar_xm mat1,nar_xm mat2);
int nar_xm_eq(nar_xm mat1,nar_xm mat2);
int nar_xm_get_cols(nar_xm mat);
int nar_xm_get_rows(nar_xm mat);
int nar_xm_get_ld(nar_xm mat);
char *nar_xm_pointer(nar_xm mat);
int nar_xm_subarray_safe(nar_xm *x,nar_xm mat,int start_row,int start_col,int end_row,int end_col);
int nar_xm_col_safe(nar_xv *x,nar_xm mat,int j);
int nar_xm_row_safe(nar_xv *x,nar_xm mat,int i);
nar_xm nar_xm_subarray(nar_xm mat,int start_row,int start_col,int end_row,int end_col);
nar_xv nar_xm_col(nar_xm mat,int j);
nar_xv nar_xm_row(nar_xm mat,int i);
enum nar_order nar_xm_order(nar_xm mat);
int nar_xm_valid(nar_xm mat,int i,int j);
nar_xm nar_xm_copy(nar_xm mat);
void nar_xm_free(nar_xm mat);
nar_xm nar_xm_alloc(int rows,int cols,int row_major);
int nar_xv_assign(nar_xv v1,nar_xv v2);
int nar_xv_eq(nar_xv v1,nar_xv v2);
int nar_xv_n(nar_xv v);
int nar_xv_inc(nar_xv v);
char *nar_xv_pointer(nar_xv v);
int nar_xv_slice_safe(nar_xv *out,nar_xv v,int start,int end);
nar_xv nar_xv_slice(nar_xv v,int start,int end);
int nar_xv_valid(nar_xv v,int i);
nar_xv nar_xv_copy(nar_xv v);
void nar_xv_free(nar_xv v);
nar_xv nar_xv_alloc(int n);
int nar_zm_write_binary(nar_zm v,const char *filename);
nar_zm nar_zm_read_binary(const char *filename,int row_major,int *err);
int nar_zv_write_binary(nar_zv v,const char *filename);
nar_zv nar_zv_read_binary(const char *filename,int *err);
int nar_zm_write(nar_zm v,const char *filename,const char *sep);
nar_zm nar_zm_read(const char *filename,int row_major,int *err);
int nar_zv_write(nar_zv v,const char *filename,const char *sep);
nar_zv nar_zv_read(const char *filename,int *err);
int nar_zm_set_safe(nar_zm mat,int i,int j,double a,double b);
int nar_zm_get_safe(double *a,double *b,nar_zm mat,int i,int j);
int nar_zv_set_safe(nar_zv v,int i,double a,double b);
int nar_zv_get_safe(double *a,double *b,nar_zv v,int i);
void nar_zm_set(nar_zm mat,int i,int j,double a,double b);
void nar_zm_get(double *a,double *b,nar_zm mat,int i,int j);
void nar_zv_set(nar_zv v,int i,double a,double b);
void nar_zv_get(double *a,double *b,nar_zv v,int i);
char *nar_zv_display_string(nar_zv v);
char *nar_zm_display_string(nar_zm mat);
int nar_zm_assign(nar_zm mat1,nar_zm mat2);
int nar_zm_eq(nar_zm mat1,nar_zm mat2);
int nar_zm_get_cols(nar_zm mat);
int nar_zm_get_rows(nar_zm mat);
int nar_zm_get_ld(nar_zm mat);
double *nar_zm_pointer(nar_zm mat);
int nar_zm_subarray_safe(nar_zm *x,nar_zm mat,int start_row,int start_col,int end_row,int end_col);
int nar_zm_col_safe(nar_zv *x,nar_zm mat,int j);
int nar_zm_row_safe(nar_zv *x,nar_zm mat,int i);
nar_zm nar_zm_subarray(nar_zm mat,int start_row,int start_col,int end_row,int end_col);
nar_zv nar_zm_col(nar_zm mat,int j);
nar_zv nar_zm_row(nar_zm mat,int i);
enum nar_order nar_zm_order(nar_zm mat);
int nar_zm_valid(nar_zm mat,int i,int j);
nar_zm nar_zm_copy(nar_zm mat);
void nar_zm_free(nar_zm mat);
nar_zm nar_zm_alloc(int rows,int cols,int row_major);
int nar_zv_assign(nar_zv v1,nar_zv v2);
int nar_zv_eq(nar_zv v1,nar_zv v2);
int nar_zv_n(nar_zv v);
int nar_zv_inc(nar_zv v);
double *nar_zv_pointer(nar_zv v);
int nar_zv_slice_safe(nar_zv *out,nar_zv v,int start,int end);
nar_zv nar_zv_slice(nar_zv v,int start,int end);
int nar_zv_valid(nar_zv v,int i);
nar_zv nar_zv_copy(nar_zv v);
void nar_zv_free(nar_zv v);
nar_zv nar_zv_alloc(int n);
int nar_cm_write_binary(nar_cm v,const char *filename);
nar_cm nar_cm_read_binary(const char *filename,int row_major,int *err);
int nar_cv_write_binary(nar_cv v,const char *filename);
nar_cv nar_cv_read_binary(const char *filename,int *err);
int nar_cm_write(nar_cm v,const char *filename,const char *sep);
nar_cm nar_cm_read(const char *filename,int row_major,int *err);
int nar_cv_write(nar_cv v,const char *filename,const char *sep);
nar_cv nar_cv_read(const char *filename,int *err);
int nar_cm_set_safe(nar_cm mat,int i,int j,float a,float b);
int nar_cm_get_safe(float *a,float *b,nar_cm mat,int i,int j);
int nar_cv_set_safe(nar_cv v,int i,float a,float b);
int nar_cv_get_safe(float *a,float *b,nar_cv v,int i);
void nar_cm_set(nar_cm mat,int i,int j,float a,float b);
void nar_cm_get(float *a,float *b,nar_cm mat,int i,int j);
void nar_cv_set(nar_cv v,int i,float a,float b);
void nar_cv_get(float *a,float *b,nar_cv v,int i);
char *nar_cv_display_string(nar_cv v);
char *nar_cm_display_string(nar_cm mat);
int nar_cm_assign(nar_cm mat1,nar_cm mat2);
int nar_cm_eq(nar_cm mat1,nar_cm mat2);
int nar_cm_get_cols(nar_cm mat);
int nar_cm_get_rows(nar_cm mat);
int nar_cm_get_ld(nar_cm mat);
float *nar_cm_pointer(nar_cm mat);
int nar_cm_subarray_safe(nar_cm *x,nar_cm mat,int start_row,int start_col,int end_row,int end_col);
int nar_cm_col_safe(nar_cv *x,nar_cm mat,int j);
int nar_cm_row_safe(nar_cv *x,nar_cm mat,int i);
nar_cm nar_cm_subarray(nar_cm mat,int start_row,int start_col,int end_row,int end_col);
nar_cv nar_cm_col(nar_cm mat,int j);
nar_cv nar_cm_row(nar_cm mat,int i);
enum nar_order nar_cm_order(nar_cm mat);
int nar_cm_valid(nar_cm mat,int i,int j);
nar_cm nar_cm_copy(nar_cm mat);
void nar_cm_free(nar_cm mat);
nar_cm nar_cm_alloc(int rows,int cols,int row_major);
int nar_cv_assign(nar_cv v1,nar_cv v2);
int nar_cv_eq(nar_cv v1,nar_cv v2);
int nar_cv_n(nar_cv v);
int nar_cv_inc(nar_cv v);
float *nar_cv_pointer(nar_cv v);
int nar_cv_slice_safe(nar_cv *out,nar_cv v,int start,int end);
nar_cv nar_cv_slice(nar_cv v,int start,int end);
int nar_cv_valid(nar_cv v,int i);
nar_cv nar_cv_copy(nar_cv v);
void nar_cv_free(nar_cv v);
nar_cv nar_cv_alloc(int n);
int nar_dm_write_binary(nar_dm v,const char *filename);
nar_dm nar_dm_read_binary(const char *filename,int row_major,int *err);
int nar_dv_write_binary(nar_dv v,const char *filename);
nar_dv nar_dv_read_binary(const char *filename,int *err);
int nar_dm_write(nar_dm v,const char *filename,const char *sep);
nar_dm nar_dm_read(const char *filename,int row_major,int *err);
int nar_dv_write(nar_dv v,const char *filename,const char *sep);
nar_dv nar_dv_read(const char *filename,int *err);
int nar_dm_set_safe(nar_dm mat,int i,int j,double x);
int nar_dm_get_safe(double *x,nar_dm mat,int i,int j);
int nar_dv_set_safe(nar_dv v,int i,double x);
int nar_dv_get_safe(double *x,nar_dv v,int i);
void nar_dm_set(nar_dm mat,int i,int j,double x);
double nar_dm_get(nar_dm mat,int i,int j);
void nar_dv_set(nar_dv v,int i,double x);
double nar_dv_get(nar_dv v,int i);
char *nar_dv_display_string(nar_dv v);
char *nar_dm_display_string(nar_dm mat);
int nar_dm_assign(nar_dm mat1,nar_dm mat2);
int nar_dm_eq(nar_dm mat1,nar_dm mat2);
int nar_dm_get_cols(nar_dm mat);
int nar_dm_get_rows(nar_dm mat);
int nar_dm_get_ld(nar_dm mat);
double *nar_dm_pointer(nar_dm mat);
int nar_dm_subarray_safe(nar_dm *x,nar_dm mat,int start_row,int start_col,int end_row,int end_col);
int nar_dm_col_safe(nar_dv *x,nar_dm mat,int j);
int nar_dm_row_safe(nar_dv *x,nar_dm mat,int i);
nar_dm nar_dm_subarray(nar_dm mat,int start_row,int start_col,int end_row,int end_col);
nar_dv nar_dm_col(nar_dm mat,int j);
nar_dv nar_dm_row(nar_dm mat,int i);
enum nar_order nar_dm_order(nar_dm mat);
int nar_dm_valid(nar_dm mat,int i,int j);
nar_dm nar_dm_copy(nar_dm mat);
void nar_dm_free(nar_dm mat);
nar_dm nar_dm_alloc(int rows,int cols,int row_major);
int nar_dv_assign(nar_dv v1,nar_dv v2);
int nar_dv_eq(nar_dv v1,nar_dv v2);
int nar_dv_n(nar_dv v);
int nar_dv_inc(nar_dv v);
double *nar_dv_pointer(nar_dv v);
int nar_dv_slice_safe(nar_dv *out,nar_dv v,int start,int end);
nar_dv nar_dv_slice(nar_dv v,int start,int end);
int nar_dv_valid(nar_dv v,int i);
nar_dv nar_dv_copy(nar_dv v);
void nar_dv_free(nar_dv v);
nar_dv nar_dv_alloc(int n);
int nar_sm_write_binary(nar_sm v,const char *filename);
nar_sm nar_sm_read_binary(const char *filename,int row_major,int *err);
int nar_sv_write_binary(nar_sv v,const char *filename);
nar_sv nar_sv_read_binary(const char *filename,int *err);
int nar_sm_write(nar_sm v,const char *filename,const char *sep);
nar_sm nar_sm_read(const char *filename,int row_major,int *err);
int nar_sv_write(nar_sv v,const char *filename,const char *sep);
nar_sv nar_sv_read(const char *filename,int *err);
int nar_sm_set_safe(nar_sm mat,int i,int j,float x);
int nar_sm_get_safe(float *x,nar_sm mat,int i,int j);
int nar_sv_set_safe(nar_sv v,int i,float x);
int nar_sv_get_safe(float *x,nar_sv v,int i);
void nar_sm_set(nar_sm mat,int i,int j,float x);
float nar_sm_get(nar_sm mat,int i,int j);
void nar_sv_set(nar_sv v,int i,float x);
float nar_sv_get(nar_sv v,int i);
char *nar_sv_display_string(nar_sv v);
char *nar_sm_display_string(nar_sm mat);
int nar_sm_assign(nar_sm mat1,nar_sm mat2);
int nar_sm_eq(nar_sm mat1,nar_sm mat2);
int nar_sm_get_cols(nar_sm mat);
int nar_sm_get_rows(nar_sm mat);
int nar_sm_get_ld(nar_sm mat);
float *nar_sm_pointer(nar_sm mat);
int nar_sm_subarray_safe(nar_sm *x,nar_sm mat,int start_row,int start_col,int end_row,int end_col);
int nar_sm_col_safe(nar_sv *x,nar_sm mat,int j);
int nar_sm_row_safe(nar_sv *x,nar_sm mat,int i);
nar_sm nar_sm_subarray(nar_sm mat,int start_row,int start_col,int end_row,int end_col);
nar_sv nar_sm_col(nar_sm mat,int j);
nar_sv nar_sm_row(nar_sm mat,int i);
enum nar_order nar_sm_order(nar_sm mat);
int nar_sm_valid(nar_sm mat,int i,int j);
nar_sm nar_sm_copy(nar_sm mat);
void nar_sm_free(nar_sm mat);
nar_sm nar_sm_alloc(int rows,int cols,int row_major);
int nar_sv_assign(nar_sv v1,nar_sv v2);
int nar_sv_eq(nar_sv v1,nar_sv v2);
int nar_sv_n(nar_sv v);
int nar_sv_inc(nar_sv v);
float *nar_sv_pointer(nar_sv v);
int nar_sv_slice_safe(nar_sv *out,nar_sv v,int start,int end);
nar_sv nar_sv_slice(nar_sv v,int start,int end);
int nar_sv_valid(nar_sv v,int i);
nar_sv nar_sv_copy(nar_sv v);
void nar_sv_free(nar_sv v);
nar_sv nar_sv_alloc(int n);
int nar_lm_write_binary(nar_lm v,const char *filename);
nar_lm nar_lm_read_binary(const char *filename,int row_major,int *err);
int nar_lv_write_binary(nar_lv v,const char *filename);
nar_lv nar_lv_read_binary(const char *filename,int *err);
int nar_lm_write(nar_lm v,const char *filename,const char *sep);
nar_lm nar_lm_read(const char *filename,int row_major,int *err);
int nar_lv_write(nar_lv v,const char *filename,const char *sep);
nar_lv nar_lv_read(const char *filename,int *err);
int nar_lm_set_safe(nar_lm mat,int i,int j,long x);
int nar_lm_get_safe(long *x,nar_lm mat,int i,int j);
int nar_lv_set_safe(nar_lv v,int i,long x);
int nar_lv_get_safe(long *x,nar_lv v,int i);
void nar_lm_set(nar_lm mat,int i,int j,long x);
long nar_lm_get(nar_lm mat,int i,int j);
void nar_lv_set(nar_lv v,int i,long x);
long nar_lv_get(nar_lv v,int i);
char *nar_lv_display_string(nar_lv v);
char *nar_lm_display_string(nar_lm mat);
int nar_lm_assign(nar_lm mat1,nar_lm mat2);
int nar_lm_eq(nar_lm mat1,nar_lm mat2);
int nar_lm_get_cols(nar_lm mat);
int nar_lm_get_rows(nar_lm mat);
int nar_lm_get_ld(nar_lm mat);
long *nar_lm_pointer(nar_lm mat);
int nar_lm_subarray_safe(nar_lm *x,nar_lm mat,int start_row,int start_col,int end_row,int end_col);
int nar_lm_col_safe(nar_lv *x,nar_lm mat,int j);
int nar_lm_row_safe(nar_lv *x,nar_lm mat,int i);
nar_lm nar_lm_subarray(nar_lm mat,int start_row,int start_col,int end_row,int end_col);
nar_lv nar_lm_col(nar_lm mat,int j);
nar_lv nar_lm_row(nar_lm mat,int i);
enum nar_order nar_lm_order(nar_lm mat);
int nar_lm_valid(nar_lm mat,int i,int j);
nar_lm nar_lm_copy(nar_lm mat);
void nar_lm_free(nar_lm mat);
nar_lm nar_lm_alloc(int rows,int cols,int row_major);
int nar_lv_assign(nar_lv v1,nar_lv v2);
int nar_lv_eq(nar_lv v1,nar_lv v2);
int nar_lv_n(nar_lv v);
int nar_lv_inc(nar_lv v);
long *nar_lv_pointer(nar_lv v);
int nar_lv_slice_safe(nar_lv *out,nar_lv v,int start,int end);
nar_lv nar_lv_slice(nar_lv v,int start,int end);
int nar_lv_valid(nar_lv v,int i);
nar_lv nar_lv_copy(nar_lv v);
void nar_lv_free(nar_lv v);
nar_lv nar_lv_alloc(int n);
int nar_im_write_binary(nar_im v,const char *filename);
nar_im nar_im_read_binary(const char *filename,int row_major,int *err);
int nar_iv_write_binary(nar_iv v,const char *filename);
nar_iv nar_iv_read_binary(const char *filename,int *err);
int nar_im_write(nar_im v,const char *filename,const char *sep);
nar_im nar_im_read(const char *filename,int row_major,int *err);
int nar_iv_write(nar_iv v,const char *filename,const char *sep);
nar_iv nar_iv_read(const char *filename,int *err);
int nar_im_set_safe(nar_im mat,int i,int j,int x);
int nar_im_get_safe(int *x,nar_im mat,int i,int j);
int nar_iv_set_safe(nar_iv v,int i,int x);
int nar_iv_get_safe(int *x,nar_iv v,int i);
void nar_im_set(nar_im mat,int i,int j,int x);
int nar_im_get(nar_im mat,int i,int j);
void nar_iv_set(nar_iv v,int i,int x);
int nar_iv_get(nar_iv v,int i);
char *nar_iv_display_string(nar_iv v);
char *nar_im_display_string(nar_im mat);
int nar_im_assign(nar_im mat1,nar_im mat2);
int nar_im_eq(nar_im mat1,nar_im mat2);
int nar_im_get_cols(nar_im mat);
int nar_im_get_rows(nar_im mat);
int nar_im_get_ld(nar_im mat);
int *nar_im_pointer(nar_im mat);
int nar_im_subarray_safe(nar_im *x,nar_im mat,int start_row,int start_col,int end_row,int end_col);
int nar_im_col_safe(nar_iv *x,nar_im mat,int j);
int nar_im_row_safe(nar_iv *x,nar_im mat,int i);
nar_im nar_im_subarray(nar_im mat,int start_row,int start_col,int end_row,int end_col);
nar_iv nar_im_col(nar_im mat,int j);
nar_iv nar_im_row(nar_im mat,int i);
enum nar_order nar_im_order(nar_im mat);
int nar_im_valid(nar_im mat,int i,int j);
nar_im nar_im_copy(nar_im mat);
void nar_im_free(nar_im mat);
nar_im nar_im_alloc(int rows,int cols,int row_major);
int nar_iv_assign(nar_iv v1,nar_iv v2);
int nar_iv_eq(nar_iv v1,nar_iv v2);
int nar_iv_n(nar_iv v);
int nar_iv_inc(nar_iv v);
int *nar_iv_pointer(nar_iv v);
int nar_iv_slice_safe(nar_iv *out,nar_iv v,int start,int end);
nar_iv nar_iv_slice(nar_iv v,int start,int end);
int nar_iv_valid(nar_iv v,int i);
nar_iv nar_iv_copy(nar_iv v);
void nar_iv_free(nar_iv v);
nar_iv nar_iv_alloc(int n);


#ifdef __cplusplus
}
#endif
